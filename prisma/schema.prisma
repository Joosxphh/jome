generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String?  // Peut Ãªtre null si l'utilisateur utilise OAuth
  createdAt DateTime @default(now())

  // Relation avec les recettes (un utilisateur peut en crÃ©er plusieurs)
  recipes Recipe[]

  // Relation avec les notes donnÃ©es par l'utilisateur
  ratings Rating[]

  // ðŸ”¹ Relations pour NextAuth
  accounts Account[]
  sessions Session[]
}

model Recipe {
  id          String   @id @default(uuid())
  title       String
  description String
  difficulty  Int      @default(1) // De 1 Ã  5
  time        Int // En minutes
  imageUrl    String? // URL dâ€™une image (optionnel)
  createdAt   DateTime @default(now())

  // Relation avec les ingrÃ©dients et Ã©tapes
  ingredients Ingredient[]
  steps       Step[]

  // Relation avec l'utilisateur (qui a crÃ©Ã© la recette)
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  // Notes (chaque utilisateur peut noter une recette)
  ratings Rating[]
}

model Ingredient {
  id       String @id @default(uuid())
  name     String
  quantity String // "400g", "2 unitÃ©s", etc.

  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Step {
  id          String @id @default(uuid())
  instruction String
  order       Int // Ajout de l'ordre des Ã©tapes âœ…

  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}


model Rating {
  id       String @id @default(uuid())
  value    Int // Note de 1 Ã  5
  userId   String
  recipeId String

  user   User   @relation(fields: [userId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])
}

//
// ðŸ”¹ ModÃ¨les nÃ©cessaires pour NextAuth
//
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  
  access_token      String?  
  expires_at        Int?      
  token_type        String?   
  scope            String?    
  id_token          String?   
  session_state     String?   

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String  @id @default(cuid())
  sessionToken String  @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String  
  token      String  @unique
  expires    DateTime

  @@unique([identifier, token])
}
